package cn.oge.kdm.rtdb.thrift.source; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-09-10")
public class ThriftService {

  public interface Iface {

    public String HelloString(String para) throws TException;

    public Map<String,TRtSnapshotData> readLatestData(List<String> codes) throws TException;

    public Map<String,TRtHistoryData> readHistoryData(List<String> codes, int startTime, int endTime, int interval) throws TException;

  }

  public interface AsyncIface {

    public void HelloString(String para, AsyncMethodCallback resultHandler) throws TException;

    public void readLatestData(List<String> codes, AsyncMethodCallback resultHandler) throws TException;

    public void readHistoryData(List<String> codes, int startTime, int endTime, int interval, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String HelloString(String para) throws TException
    {
      send_HelloString(para);
      return recv_HelloString();
    }

    public void send_HelloString(String para) throws TException
    {
      HelloString_args args = new HelloString_args();
      args.setPara(para);
      sendBase("HelloString", args);
    }

    public String recv_HelloString() throws TException
    {
      HelloString_result result = new HelloString_result();
      receiveBase(result, "HelloString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "HelloString failed: unknown result");
    }

    public Map<String,TRtSnapshotData> readLatestData(List<String> codes) throws TException
    {
      send_readLatestData(codes);
      return recv_readLatestData();
    }

    public void send_readLatestData(List<String> codes) throws TException
    {
      readLatestData_args args = new readLatestData_args();
      args.setCodes(codes);
      sendBase("readLatestData", args);
    }

    public Map<String,TRtSnapshotData> recv_readLatestData() throws TException
    {
      readLatestData_result result = new readLatestData_result();
      receiveBase(result, "readLatestData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readLatestData failed: unknown result");
    }

    public Map<String,TRtHistoryData> readHistoryData(List<String> codes, int startTime, int endTime, int interval) throws TException
    {
      send_readHistoryData(codes, startTime, endTime, interval);
      return recv_readHistoryData();
    }

    public void send_readHistoryData(List<String> codes, int startTime, int endTime, int interval) throws TException
    {
      readHistoryData_args args = new readHistoryData_args();
      args.setCodes(codes);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setInterval(interval);
      sendBase("readHistoryData", args);
    }

    public Map<String,TRtHistoryData> recv_readHistoryData() throws TException
    {
      readHistoryData_result result = new readHistoryData_result();
      receiveBase(result, "readHistoryData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readHistoryData failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void HelloString(String para, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      HelloString_call method_call = new HelloString_call(para, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class HelloString_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String para;
      public HelloString_call(String para, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.para = para;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("HelloString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        HelloString_args args = new HelloString_args();
        args.setPara(para);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_HelloString();
      }
    }

    public void readLatestData(List<String> codes, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      readLatestData_call method_call = new readLatestData_call(codes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readLatestData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> codes;
      public readLatestData_call(List<String> codes, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.codes = codes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readLatestData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readLatestData_args args = new readLatestData_args();
        args.setCodes(codes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,TRtSnapshotData> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readLatestData();
      }
    }

    public void readHistoryData(List<String> codes, int startTime, int endTime, int interval, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      readHistoryData_call method_call = new readHistoryData_call(codes, startTime, endTime, interval, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readHistoryData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> codes;
      private int startTime;
      private int endTime;
      private int interval;
      public readHistoryData_call(List<String> codes, int startTime, int endTime, int interval, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.codes = codes;
        this.startTime = startTime;
        this.endTime = endTime;
        this.interval = interval;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readHistoryData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readHistoryData_args args = new readHistoryData_args();
        args.setCodes(codes);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setInterval(interval);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,TRtHistoryData> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readHistoryData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("HelloString", new HelloString());
      processMap.put("readLatestData", new readLatestData());
      processMap.put("readHistoryData", new readHistoryData());
      return processMap;
    }

    public static class HelloString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, HelloString_args> {
      public HelloString() {
        super("HelloString");
      }

      public HelloString_args getEmptyArgsInstance() {
        return new HelloString_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public HelloString_result getResult(I iface, HelloString_args args) throws TException {
        HelloString_result result = new HelloString_result();
        result.success = iface.HelloString(args.para);
        return result;
      }
    }

    public static class readLatestData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readLatestData_args> {
      public readLatestData() {
        super("readLatestData");
      }

      public readLatestData_args getEmptyArgsInstance() {
        return new readLatestData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readLatestData_result getResult(I iface, readLatestData_args args) throws TException {
        readLatestData_result result = new readLatestData_result();
        result.success = iface.readLatestData(args.codes);
        return result;
      }
    }

    public static class readHistoryData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readHistoryData_args> {
      public readHistoryData() {
        super("readHistoryData");
      }

      public readHistoryData_args getEmptyArgsInstance() {
        return new readHistoryData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readHistoryData_result getResult(I iface, readHistoryData_args args) throws TException {
        readHistoryData_result result = new readHistoryData_result();
        result.success = iface.readHistoryData(args.codes, args.startTime, args.endTime, args.interval);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("HelloString", new HelloString());
      processMap.put("readLatestData", new readLatestData());
      processMap.put("readHistoryData", new readHistoryData());
      return processMap;
    }

    public static class HelloString<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, HelloString_args, String> {
      public HelloString() {
        super("HelloString");
      }

      public HelloString_args getEmptyArgsInstance() {
        return new HelloString_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            HelloString_result result = new HelloString_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            HelloString_result result = new HelloString_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, HelloString_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.HelloString(args.para,resultHandler);
      }
    }

    public static class readLatestData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readLatestData_args, Map<String,TRtSnapshotData>> {
      public readLatestData() {
        super("readLatestData");
      }

      public readLatestData_args getEmptyArgsInstance() {
        return new readLatestData_args();
      }

      public AsyncMethodCallback<Map<String,TRtSnapshotData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,TRtSnapshotData>>() { 
          public void onComplete(Map<String,TRtSnapshotData> o) {
            readLatestData_result result = new readLatestData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readLatestData_result result = new readLatestData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readLatestData_args args, AsyncMethodCallback<Map<String,TRtSnapshotData>> resultHandler) throws TException {
        iface.readLatestData(args.codes,resultHandler);
      }
    }

    public static class readHistoryData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readHistoryData_args, Map<String,TRtHistoryData>> {
      public readHistoryData() {
        super("readHistoryData");
      }

      public readHistoryData_args getEmptyArgsInstance() {
        return new readHistoryData_args();
      }

      public AsyncMethodCallback<Map<String,TRtHistoryData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,TRtHistoryData>>() { 
          public void onComplete(Map<String,TRtHistoryData> o) {
            readHistoryData_result result = new readHistoryData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readHistoryData_result result = new readHistoryData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readHistoryData_args args, AsyncMethodCallback<Map<String,TRtHistoryData>> resultHandler) throws TException {
        iface.readHistoryData(args.codes, args.startTime, args.endTime, args.interval,resultHandler);
      }
    }

  }

  public static class HelloString_args implements org.apache.thrift.TBase<HelloString_args, HelloString_args._Fields>, java.io.Serializable, Cloneable, Comparable<HelloString_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HelloString_args");

    private static final org.apache.thrift.protocol.TField PARA_FIELD_DESC = new org.apache.thrift.protocol.TField("para", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new HelloString_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new HelloString_argsTupleSchemeFactory());
    }

    public String para; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA((short)1, "para");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA
            return PARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA, new org.apache.thrift.meta_data.FieldMetaData("para", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HelloString_args.class, metaDataMap);
    }

    public HelloString_args() {
    }

    public HelloString_args(
      String para)
    {
      this();
      this.para = para;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HelloString_args(HelloString_args other) {
      if (other.isSetPara()) {
        this.para = other.para;
      }
    }

    public HelloString_args deepCopy() {
      return new HelloString_args(this);
    }

    @Override
    public void clear() {
      this.para = null;
    }

    public String getPara() {
      return this.para;
    }

    public HelloString_args setPara(String para) {
      this.para = para;
      return this;
    }

    public void unsetPara() {
      this.para = null;
    }

    /** Returns true if field para is set (has been assigned a value) and false otherwise */
    public boolean isSetPara() {
      return this.para != null;
    }

    public void setParaIsSet(boolean value) {
      if (!value) {
        this.para = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA:
        if (value == null) {
          unsetPara();
        } else {
          setPara((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA:
        return getPara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA:
        return isSetPara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof HelloString_args)
        return this.equals((HelloString_args)that);
      return false;
    }

    public boolean equals(HelloString_args that) {
      if (that == null)
        return false;

      boolean this_present_para = true && this.isSetPara();
      boolean that_present_para = true && that.isSetPara();
      if (this_present_para || that_present_para) {
        if (!(this_present_para && that_present_para))
          return false;
        if (!this.para.equals(that.para))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_para = true && (isSetPara());
      list.add(present_para);
      if (present_para)
        list.add(para);

      return list.hashCode();
    }

    @Override
    public int compareTo(HelloString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPara()).compareTo(other.isSetPara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para, other.para);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("HelloString_args(");
      boolean first = true;

      sb.append("para:");
      if (this.para == null) {
        sb.append("null");
      } else {
        sb.append(this.para);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class HelloString_argsStandardSchemeFactory implements SchemeFactory {
      public HelloString_argsStandardScheme getScheme() {
        return new HelloString_argsStandardScheme();
      }
    }

    private static class HelloString_argsStandardScheme extends StandardScheme<HelloString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, HelloString_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.para = iprot.readString();
                struct.setParaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, HelloString_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.para != null) {
          oprot.writeFieldBegin(PARA_FIELD_DESC);
          oprot.writeString(struct.para);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class HelloString_argsTupleSchemeFactory implements SchemeFactory {
      public HelloString_argsTupleScheme getScheme() {
        return new HelloString_argsTupleScheme();
      }
    }

    private static class HelloString_argsTupleScheme extends TupleScheme<HelloString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, HelloString_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPara()) {
          oprot.writeString(struct.para);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, HelloString_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.para = iprot.readString();
          struct.setParaIsSet(true);
        }
      }
    }

  }

  public static class HelloString_result implements org.apache.thrift.TBase<HelloString_result, HelloString_result._Fields>, java.io.Serializable, Cloneable, Comparable<HelloString_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HelloString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new HelloString_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new HelloString_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HelloString_result.class, metaDataMap);
    }

    public HelloString_result() {
    }

    public HelloString_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HelloString_result(HelloString_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public HelloString_result deepCopy() {
      return new HelloString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public HelloString_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof HelloString_result)
        return this.equals((HelloString_result)that);
      return false;
    }

    public boolean equals(HelloString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(HelloString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("HelloString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class HelloString_resultStandardSchemeFactory implements SchemeFactory {
      public HelloString_resultStandardScheme getScheme() {
        return new HelloString_resultStandardScheme();
      }
    }

    private static class HelloString_resultStandardScheme extends StandardScheme<HelloString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, HelloString_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, HelloString_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class HelloString_resultTupleSchemeFactory implements SchemeFactory {
      public HelloString_resultTupleScheme getScheme() {
        return new HelloString_resultTupleScheme();
      }
    }

    private static class HelloString_resultTupleScheme extends TupleScheme<HelloString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, HelloString_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, HelloString_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class readLatestData_args implements org.apache.thrift.TBase<readLatestData_args, readLatestData_args._Fields>, java.io.Serializable, Cloneable, Comparable<readLatestData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readLatestData_args");

    private static final org.apache.thrift.protocol.TField CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("codes", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readLatestData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readLatestData_argsTupleSchemeFactory());
    }

    public List<String> codes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODES((short)1, "codes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODES
            return CODES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODES, new org.apache.thrift.meta_data.FieldMetaData("codes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readLatestData_args.class, metaDataMap);
    }

    public readLatestData_args() {
    }

    public readLatestData_args(
      List<String> codes)
    {
      this();
      this.codes = codes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readLatestData_args(readLatestData_args other) {
      if (other.isSetCodes()) {
        List<String> __this__codes = new ArrayList<String>(other.codes);
        this.codes = __this__codes;
      }
    }

    public readLatestData_args deepCopy() {
      return new readLatestData_args(this);
    }

    @Override
    public void clear() {
      this.codes = null;
    }

    public int getCodesSize() {
      return (this.codes == null) ? 0 : this.codes.size();
    }

    public java.util.Iterator<String> getCodesIterator() {
      return (this.codes == null) ? null : this.codes.iterator();
    }

    public void addToCodes(String elem) {
      if (this.codes == null) {
        this.codes = new ArrayList<String>();
      }
      this.codes.add(elem);
    }

    public List<String> getCodes() {
      return this.codes;
    }

    public readLatestData_args setCodes(List<String> codes) {
      this.codes = codes;
      return this;
    }

    public void unsetCodes() {
      this.codes = null;
    }

    /** Returns true if field codes is set (has been assigned a value) and false otherwise */
    public boolean isSetCodes() {
      return this.codes != null;
    }

    public void setCodesIsSet(boolean value) {
      if (!value) {
        this.codes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODES:
        if (value == null) {
          unsetCodes();
        } else {
          setCodes((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODES:
        return getCodes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODES:
        return isSetCodes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readLatestData_args)
        return this.equals((readLatestData_args)that);
      return false;
    }

    public boolean equals(readLatestData_args that) {
      if (that == null)
        return false;

      boolean this_present_codes = true && this.isSetCodes();
      boolean that_present_codes = true && that.isSetCodes();
      if (this_present_codes || that_present_codes) {
        if (!(this_present_codes && that_present_codes))
          return false;
        if (!this.codes.equals(that.codes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_codes = true && (isSetCodes());
      list.add(present_codes);
      if (present_codes)
        list.add(codes);

      return list.hashCode();
    }

    @Override
    public int compareTo(readLatestData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCodes()).compareTo(other.isSetCodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codes, other.codes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readLatestData_args(");
      boolean first = true;

      sb.append("codes:");
      if (this.codes == null) {
        sb.append("null");
      } else {
        sb.append(this.codes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readLatestData_argsStandardSchemeFactory implements SchemeFactory {
      public readLatestData_argsStandardScheme getScheme() {
        return new readLatestData_argsStandardScheme();
      }
    }

    private static class readLatestData_argsStandardScheme extends StandardScheme<readLatestData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readLatestData_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.codes = new ArrayList<String>(_list8.size);
                  String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.codes.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setCodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readLatestData_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.codes != null) {
          oprot.writeFieldBegin(CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.codes.size()));
            for (String _iter11 : struct.codes)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readLatestData_argsTupleSchemeFactory implements SchemeFactory {
      public readLatestData_argsTupleScheme getScheme() {
        return new readLatestData_argsTupleScheme();
      }
    }

    private static class readLatestData_argsTupleScheme extends TupleScheme<readLatestData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readLatestData_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCodes()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCodes()) {
          {
            oprot.writeI32(struct.codes.size());
            for (String _iter12 : struct.codes)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readLatestData_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.codes = new ArrayList<String>(_list13.size);
            String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.codes.add(_elem14);
            }
          }
          struct.setCodesIsSet(true);
        }
      }
    }

  }

  public static class readLatestData_result implements org.apache.thrift.TBase<readLatestData_result, readLatestData_result._Fields>, java.io.Serializable, Cloneable, Comparable<readLatestData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readLatestData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readLatestData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readLatestData_resultTupleSchemeFactory());
    }

    public Map<String,TRtSnapshotData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRtSnapshotData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readLatestData_result.class, metaDataMap);
    }

    public readLatestData_result() {
    }

    public readLatestData_result(
      Map<String,TRtSnapshotData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readLatestData_result(readLatestData_result other) {
      if (other.isSetSuccess()) {
        Map<String,TRtSnapshotData> __this__success = new HashMap<String,TRtSnapshotData>(other.success.size());
        for (Map.Entry<String, TRtSnapshotData> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          TRtSnapshotData other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          TRtSnapshotData __this__success_copy_value = new TRtSnapshotData(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public readLatestData_result deepCopy() {
      return new readLatestData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, TRtSnapshotData val) {
      if (this.success == null) {
        this.success = new HashMap<String,TRtSnapshotData>();
      }
      this.success.put(key, val);
    }

    public Map<String,TRtSnapshotData> getSuccess() {
      return this.success;
    }

    public readLatestData_result setSuccess(Map<String,TRtSnapshotData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,TRtSnapshotData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readLatestData_result)
        return this.equals((readLatestData_result)that);
      return false;
    }

    public boolean equals(readLatestData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(readLatestData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readLatestData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readLatestData_resultStandardSchemeFactory implements SchemeFactory {
      public readLatestData_resultStandardScheme getScheme() {
        return new readLatestData_resultStandardScheme();
      }
    }

    private static class readLatestData_resultStandardScheme extends StandardScheme<readLatestData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readLatestData_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                  struct.success = new HashMap<String,TRtSnapshotData>(2*_map16.size);
                  String _key17;
                  TRtSnapshotData _val18;
                  for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                  {
                    _key17 = iprot.readString();
                    _val18 = new TRtSnapshotData();
                    _val18.read(iprot);
                    struct.success.put(_key17, _val18);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readLatestData_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, TRtSnapshotData> _iter20 : struct.success.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              _iter20.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readLatestData_resultTupleSchemeFactory implements SchemeFactory {
      public readLatestData_resultTupleScheme getScheme() {
        return new readLatestData_resultTupleScheme();
      }
    }

    private static class readLatestData_resultTupleScheme extends TupleScheme<readLatestData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readLatestData_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, TRtSnapshotData> _iter21 : struct.success.entrySet())
            {
              oprot.writeString(_iter21.getKey());
              _iter21.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readLatestData_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,TRtSnapshotData>(2*_map22.size);
            String _key23;
            TRtSnapshotData _val24;
            for (int _i25 = 0; _i25 < _map22.size; ++_i25)
            {
              _key23 = iprot.readString();
              _val24 = new TRtSnapshotData();
              _val24.read(iprot);
              struct.success.put(_key23, _val24);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class readHistoryData_args implements org.apache.thrift.TBase<readHistoryData_args, readHistoryData_args._Fields>, java.io.Serializable, Cloneable, Comparable<readHistoryData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readHistoryData_args");

    private static final org.apache.thrift.protocol.TField CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("codes", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readHistoryData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readHistoryData_argsTupleSchemeFactory());
    }

    public List<String> codes; // required
    public int startTime; // required
    public int endTime; // required
    public int interval; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODES((short)1, "codes"),
      START_TIME((short)2, "startTime"),
      END_TIME((short)3, "endTime"),
      INTERVAL((short)4, "interval");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODES
            return CODES;
          case 2: // START_TIME
            return START_TIME;
          case 3: // END_TIME
            return END_TIME;
          case 4: // INTERVAL
            return INTERVAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private static final int __INTERVAL_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODES, new org.apache.thrift.meta_data.FieldMetaData("codes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readHistoryData_args.class, metaDataMap);
    }

    public readHistoryData_args() {
    }

    public readHistoryData_args(
      List<String> codes,
      int startTime,
      int endTime,
      int interval)
    {
      this();
      this.codes = codes;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.interval = interval;
      setIntervalIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readHistoryData_args(readHistoryData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCodes()) {
        List<String> __this__codes = new ArrayList<String>(other.codes);
        this.codes = __this__codes;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
      this.interval = other.interval;
    }

    public readHistoryData_args deepCopy() {
      return new readHistoryData_args(this);
    }

    @Override
    public void clear() {
      this.codes = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      setIntervalIsSet(false);
      this.interval = 0;
    }

    public int getCodesSize() {
      return (this.codes == null) ? 0 : this.codes.size();
    }

    public java.util.Iterator<String> getCodesIterator() {
      return (this.codes == null) ? null : this.codes.iterator();
    }

    public void addToCodes(String elem) {
      if (this.codes == null) {
        this.codes = new ArrayList<String>();
      }
      this.codes.add(elem);
    }

    public List<String> getCodes() {
      return this.codes;
    }

    public readHistoryData_args setCodes(List<String> codes) {
      this.codes = codes;
      return this;
    }

    public void unsetCodes() {
      this.codes = null;
    }

    /** Returns true if field codes is set (has been assigned a value) and false otherwise */
    public boolean isSetCodes() {
      return this.codes != null;
    }

    public void setCodesIsSet(boolean value) {
      if (!value) {
        this.codes = null;
      }
    }

    public int getStartTime() {
      return this.startTime;
    }

    public readHistoryData_args setStartTime(int startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public int getEndTime() {
      return this.endTime;
    }

    public readHistoryData_args setEndTime(int endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public int getInterval() {
      return this.interval;
    }

    public readHistoryData_args setInterval(int interval) {
      this.interval = interval;
      setIntervalIsSet(true);
      return this;
    }

    public void unsetInterval() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    /** Returns true if field interval is set (has been assigned a value) and false otherwise */
    public boolean isSetInterval() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
    }

    public void setIntervalIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODES:
        if (value == null) {
          unsetCodes();
        } else {
          setCodes((List<String>)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Integer)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Integer)value);
        }
        break;

      case INTERVAL:
        if (value == null) {
          unsetInterval();
        } else {
          setInterval((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODES:
        return getCodes();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      case INTERVAL:
        return getInterval();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODES:
        return isSetCodes();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case INTERVAL:
        return isSetInterval();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readHistoryData_args)
        return this.equals((readHistoryData_args)that);
      return false;
    }

    public boolean equals(readHistoryData_args that) {
      if (that == null)
        return false;

      boolean this_present_codes = true && this.isSetCodes();
      boolean that_present_codes = true && that.isSetCodes();
      if (this_present_codes || that_present_codes) {
        if (!(this_present_codes && that_present_codes))
          return false;
        if (!this.codes.equals(that.codes))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_interval = true;
      boolean that_present_interval = true;
      if (this_present_interval || that_present_interval) {
        if (!(this_present_interval && that_present_interval))
          return false;
        if (this.interval != that.interval)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_codes = true && (isSetCodes());
      list.add(present_codes);
      if (present_codes)
        list.add(codes);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      boolean present_interval = true;
      list.add(present_interval);
      if (present_interval)
        list.add(interval);

      return list.hashCode();
    }

    @Override
    public int compareTo(readHistoryData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCodes()).compareTo(other.isSetCodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codes, other.codes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInterval()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readHistoryData_args(");
      boolean first = true;

      sb.append("codes:");
      if (this.codes == null) {
        sb.append("null");
      } else {
        sb.append(this.codes);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("interval:");
      sb.append(this.interval);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readHistoryData_argsStandardSchemeFactory implements SchemeFactory {
      public readHistoryData_argsStandardScheme getScheme() {
        return new readHistoryData_argsStandardScheme();
      }
    }

    private static class readHistoryData_argsStandardScheme extends StandardScheme<readHistoryData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readHistoryData_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.codes = new ArrayList<String>(_list26.size);
                  String _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = iprot.readString();
                    struct.codes.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setCodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startTime = iprot.readI32();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endTime = iprot.readI32();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INTERVAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.interval = iprot.readI32();
                struct.setIntervalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readHistoryData_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.codes != null) {
          oprot.writeFieldBegin(CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.codes.size()));
            for (String _iter29 : struct.codes)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI32(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI32(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
        oprot.writeI32(struct.interval);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readHistoryData_argsTupleSchemeFactory implements SchemeFactory {
      public readHistoryData_argsTupleScheme getScheme() {
        return new readHistoryData_argsTupleScheme();
      }
    }

    private static class readHistoryData_argsTupleScheme extends TupleScheme<readHistoryData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readHistoryData_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCodes()) {
          optionals.set(0);
        }
        if (struct.isSetStartTime()) {
          optionals.set(1);
        }
        if (struct.isSetEndTime()) {
          optionals.set(2);
        }
        if (struct.isSetInterval()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCodes()) {
          {
            oprot.writeI32(struct.codes.size());
            for (String _iter30 : struct.codes)
            {
              oprot.writeString(_iter30);
            }
          }
        }
        if (struct.isSetStartTime()) {
          oprot.writeI32(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI32(struct.endTime);
        }
        if (struct.isSetInterval()) {
          oprot.writeI32(struct.interval);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readHistoryData_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.codes = new ArrayList<String>(_list31.size);
            String _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = iprot.readString();
              struct.codes.add(_elem32);
            }
          }
          struct.setCodesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTime = iprot.readI32();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endTime = iprot.readI32();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.interval = iprot.readI32();
          struct.setIntervalIsSet(true);
        }
      }
    }

  }

  public static class readHistoryData_result implements org.apache.thrift.TBase<readHistoryData_result, readHistoryData_result._Fields>, java.io.Serializable, Cloneable, Comparable<readHistoryData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readHistoryData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readHistoryData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readHistoryData_resultTupleSchemeFactory());
    }

    public Map<String,TRtHistoryData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRtHistoryData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readHistoryData_result.class, metaDataMap);
    }

    public readHistoryData_result() {
    }

    public readHistoryData_result(
      Map<String,TRtHistoryData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readHistoryData_result(readHistoryData_result other) {
      if (other.isSetSuccess()) {
        Map<String,TRtHistoryData> __this__success = new HashMap<String,TRtHistoryData>(other.success.size());
        for (Map.Entry<String, TRtHistoryData> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          TRtHistoryData other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          TRtHistoryData __this__success_copy_value = new TRtHistoryData(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public readHistoryData_result deepCopy() {
      return new readHistoryData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, TRtHistoryData val) {
      if (this.success == null) {
        this.success = new HashMap<String,TRtHistoryData>();
      }
      this.success.put(key, val);
    }

    public Map<String,TRtHistoryData> getSuccess() {
      return this.success;
    }

    public readHistoryData_result setSuccess(Map<String,TRtHistoryData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,TRtHistoryData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readHistoryData_result)
        return this.equals((readHistoryData_result)that);
      return false;
    }

    public boolean equals(readHistoryData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(readHistoryData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readHistoryData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readHistoryData_resultStandardSchemeFactory implements SchemeFactory {
      public readHistoryData_resultStandardScheme getScheme() {
        return new readHistoryData_resultStandardScheme();
      }
    }

    private static class readHistoryData_resultStandardScheme extends StandardScheme<readHistoryData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readHistoryData_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                  struct.success = new HashMap<String,TRtHistoryData>(2*_map34.size);
                  String _key35;
                  TRtHistoryData _val36;
                  for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                  {
                    _key35 = iprot.readString();
                    _val36 = new TRtHistoryData();
                    _val36.read(iprot);
                    struct.success.put(_key35, _val36);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readHistoryData_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, TRtHistoryData> _iter38 : struct.success.entrySet())
            {
              oprot.writeString(_iter38.getKey());
              _iter38.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readHistoryData_resultTupleSchemeFactory implements SchemeFactory {
      public readHistoryData_resultTupleScheme getScheme() {
        return new readHistoryData_resultTupleScheme();
      }
    }

    private static class readHistoryData_resultTupleScheme extends TupleScheme<readHistoryData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readHistoryData_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, TRtHistoryData> _iter39 : struct.success.entrySet())
            {
              oprot.writeString(_iter39.getKey());
              _iter39.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readHistoryData_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,TRtHistoryData>(2*_map40.size);
            String _key41;
            TRtHistoryData _val42;
            for (int _i43 = 0; _i43 < _map40.size; ++_i43)
            {
              _key41 = iprot.readString();
              _val42 = new TRtHistoryData();
              _val42.read(iprot);
              struct.success.put(_key41, _val42);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
